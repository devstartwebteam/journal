<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
@using (Html.BeginForm())
{
    <div class="row top50">
        <div class="col-md-12">
            <div class="portlet box blue-madison">
                <div class="portlet-title col-md-12 text-center">
                    <div class="caption">
                        <i class="fa fa-cog"></i><#= ViewName#>
                    </div>
                    <div class="tools">
                        <a href="javascript:;" class="collapse">
                        </a>
                    </div>
                </div>
                <div class="portlet-body">
                    <div class="row top20 bottom20">
                        <div class="col-md-12">
<# 
    if (isControlHtmlAttributesSupported) {
#>        
<#        
    } else {
#>
        @Html.ValidationSummary(true)
<#      
    }
int cntScaffoldCnter = 0;
int lastRowClosed = 0;
int lastColClosed = 0;
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (!property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }
	if(!property.Scaffold){
	#>	
	@Html.HiddenFor(model => model.<#= property.PropertyName #>)
	<#
	continue;
	}
	if (cntScaffoldCnter % 6 == 0 && cntScaffoldCnter % 18 == 0)
	{
	//We have either just started or hit 18 units across 3 columns, give it another row - MW
#>		
						<div class="row">   	
							<div class="col-md-4">
<#
	}
	if (cntScaffoldCnter % 6 == 0 && cntScaffoldCnter % 18 != 0)
	{	
#>		
							<div class="col-md-4">						
<#
	}
	cntScaffoldCnter++;
#>
								<div class="row top5">
									<div class="form-group">
<#
        if (property.IsForeignKey) {
#>
										@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label text-right col-md-5" })
<#
        } else {
#>
										@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label text-right col-md-5" })
<#
        }
#>
									<div class="col-md-7">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
										@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
										@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
								<div class="checkbox">
<#
                PushIndent("    ");
#>
										@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
										@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control input-sm" })
<#
            } else {
#>
										@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control input-sm" } })
<#
            } 
        } else {
#>
										@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
										@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
										@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
								</div>
<#
        }
#>
						</div>
					</div>
				</div>
<#
    }	
	if (cntScaffoldCnter % 6 == 0 && cntScaffoldCnter % 18 != 0 && (lastColClosed != cntScaffoldCnter))
	{
	#>
	</div>		
		<#
		lastColClosed = cntScaffoldCnter;   
	}
	if (cntScaffoldCnter % 18 == 0 && cntScaffoldCnter != 0 && (lastRowClosed != cntScaffoldCnter))
	{
	#>			
		</div>
		</div>
		<div class="row"><hr class="top10 bottom5" /></div>
	   <#
		lastRowClosed = cntScaffoldCnter;		
	}	
}
//foreach is over... make sure the 2 div's are closed up no matter what - MW
if(lastRowClosed == 0 || lastColClosed == 0)
{
	//Never closed anything
	#>
	</div>
	</div>
	<#
} else if (cntScaffoldCnter > lastRowClosed || cntScaffoldCnter > lastColClosed)
{
	//Is counter greater than whenever they were last closed?
	//If it's equal they've been closed.. only check greater - MW
	if(cntScaffoldCnter > lastColClosed)
	{
	#>
		</div>
		<#
	}

	if(cntScaffoldCnter > lastRowClosed)
	{
	#>
		</div>
		<#
	}
}
#>
</div>
</div>
    <div class="row">
        <div class="col-md-offset-1 col-md-4">
            <div class="row top20">
                <div class="col-md-4">
                    <input type="submit" value="Create" class="btn green btn-block" />
                </div>                                
                <div class="col-md-4">
                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn grey-gallery btn-block" })
                </div>
            </div>
        </div>
    </div>
</div>
</div>
</div>
</div>
}
<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
else{
#>
@section Scripts{
    <script>
        $('input:text').first().focus();

        $('input').each(function ()
        {
            var myType = $(this).attr('type');
            
            if (myType == "datetime")
            {                
                $(this).datepicker();
            }
        });
    </script>
}
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>